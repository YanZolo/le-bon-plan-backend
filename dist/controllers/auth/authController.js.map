{"version":3,"sources":["../../../src/controllers/auth/authController.ts"],"names":["dotenv","bcrypt","jwt","UserModel","UserNotFound","config","ACCESS_TOKEN_SECRET","REFRESH_TOKEN_SECRET","process","env","AuthController","handleRegister","req","res","password","username","email","body","hashedPassword","hash","user","newUser","save","console","log","redirect","handleLogin","findOne","select","lean","compare","accessToken","sign","expiresIn","refreshToken","updateOne","$addToSet","cookie","send","handleLogout"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AAEAJ,MAAM,CAACK,MAAP;AAKA,MAAM;AAAEC,EAAAA,mBAAF;AAAuBC,EAAAA;AAAvB,IAAgDC,OAAO,CAACC,GAA9D;AAEA,eAAe,MAAMC,cAAN,CAAqB;AAGd,QAAdC,cAAc,CAACC,GAAD,EAAeC,GAAf,EAA8B;AAChD,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,QAAZ;AAAsBC,MAAAA;AAAtB,QAAgCJ,GAAG,CAACK,IAA1C;AACA,UAAMC,cAAc,GAAG,MAAMjB,MAAM,CAACkB,IAAP,CAAYL,QAAZ,EAAsB,EAAtB,CAA7B;AACA,UAAMM,IAAI,GAAG,IAAIjB,SAAJ,CAAc;AACzBY,MAAAA,QAAQ,EAAEA,QADe;AAEzBC,MAAAA,KAAK,EAAEA,KAFkB;AAGzBF,MAAAA,QAAQ,EAAEI;AAHe,KAAd,CAAb;AAKA,UAAMG,OAAO,GAAG,MAAMD,IAAI,CAACE,IAAL,EAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,OAA/B;AACAR,IAAAA,GAAG,CAACY,QAAJ,CAAa,aAAb;AACD;;AAEgB,QAAXC,WAAW,CAACd,GAAD,EAA8DC,GAA9D,EAA6E;AAC5F,UAAM;AAAEG,MAAAA,KAAF;AAASF,MAAAA;AAAT,QAAsBF,GAAG,CAACK,IAAhC;AACA,UAAMG,IAAI,GAAG,MAAMjB,SAAS,CAACwB,OAAV,CAAkB;AAAEX,MAAAA;AAAF,KAAlB,EAA6BY,MAA7B,CAAoC,eAApC,EAAqDC,IAArD,EAAnB;;AACA,QAAI,CAACT,IAAL,EAAW;AACT,YAAM,IAAIhB,YAAJ,EAAN;AACD;;AAEDmB,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,IAApB;;AACA,QAAI,MAAMnB,MAAM,CAAC6B,OAAP,CAAehB,QAAf,EAAyBM,IAAI,CAACN,QAA9B,CAAV,EAAmD;AACjDS,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAEA,YAAMO,WAAW,GAAG7B,GAAG,CAAC8B,IAAJ,CAASZ,IAAT,EAAed,mBAAf,EAAoC;AAAE2B,QAAAA,SAAS,EAAE;AAAb,OAApC,CAApB;AACA,YAAMC,YAAY,GAAGhC,GAAG,CAAC8B,IAAJ,CAASZ,IAAT,EAAeb,oBAAf,CAArB;AACA,YAAMJ,SAAS,CAACgC,SAAV,CAAoB;AAAEnB,QAAAA;AAAF,OAApB,EAA+B;AAAEoB,QAAAA,SAAS,EAAE;AAAEF,UAAAA,YAAY,EAAEA;AAAhB;AAAb,OAA/B,CAAN;AACA,aAAOrB,GAAG,CAACwB,MAAJ,CAAW,cAAX,EAA2BN,WAA3B,EAAwCO,IAAxC,CAA6C,QAA7C,CAAP;AAGD;AACF;;AAEDC,EAAAA,YAAY,CAAC1B,GAAD,EAAgB;AAC1BA,IAAAA,GAAG,CAACwB,MAAJ,CAAW,cAAX,EAA2B,EAA3B,EAA+BZ,QAA/B,CAAwC,aAAxC;AACD;;AAtCiC","sourcesContent":["import dotenv from 'dotenv';\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport { Response, Request, CookieOptions } from 'express';\r\nimport UserModel from '../../models/userModel.js';\r\nimport UserNotFound from '../../errors/UserNotFound.js';\r\nimport { SendHandle } from 'child_process';\r\ndotenv.config();\r\n\r\ninterface ProcessEnv {\r\n  [key: string]: string\r\n}\r\nconst { ACCESS_TOKEN_SECRET, REFRESH_TOKEN_SECRET } = process.env as ProcessEnv\r\n\r\nexport default class AuthController {\r\n  // on register page\r\n\r\n  async handleRegister(req: Request, res: Response) {\r\n    const { password, username, email } = req.body;\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    const user = new UserModel({\r\n      username: username,\r\n      email: email,\r\n      password: hashedPassword\r\n    });\r\n    const newUser = await user.save();\r\n    console.log('newUser saved :', newUser)\r\n    res.redirect('/auth/login')\r\n  }\r\n\r\n  async handleLogin(req: Request<any, any, { email: string, password: string }>, res: Response) {\r\n    const { email, password } = req.body;\r\n    const user = await UserModel.findOne({ email }).select('-refreshToken').lean()\r\n    if (!user) {\r\n      throw new UserNotFound()\r\n    }\r\n\r\n    console.log('user', user)\r\n    if (await bcrypt.compare(password, user.password)) {\r\n      console.log('if statement bcrypt')\r\n\r\n      const accessToken = jwt.sign(user, ACCESS_TOKEN_SECRET, { expiresIn: '7d' }) // fixed secret type error with inteface ProcessEnv\r\n      const refreshToken = jwt.sign(user, REFRESH_TOKEN_SECRET)\r\n      await UserModel.updateOne({ email }, { $addToSet: { refreshToken: refreshToken } })\r\n      return res.cookie('access_token', accessToken).send('logged')\r\n      \r\n      // .redirect('/admin/profile')     \r\n    }\r\n  }\r\n\r\n  handleLogout(res: Response) {\r\n    res.cookie('access_token', '').redirect('/auth/login') // maybe req.cookie\r\n  }\r\n\r\n}\r\n"],"file":"authController.js"}