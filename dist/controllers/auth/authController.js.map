{"version":3,"sources":["../../../src/controllers/auth/authController.ts"],"names":["dotenv","bcrypt","jwt","UserModel","UserNotFound","Exception","config","ACCESS_TOKEN_SECRET","REFRESH_TOKEN_SECRET","process","env","AuthController","handleRegister","req","res","password","username","email","isAdmin","body","hashedPassword","hash","console","log","user","newUser","save","redirect","handleLogin","findOne","compare","accessToken","sign","expiresIn","refreshToken","updateOne","$addToSet","cookie","httpOnly","status","handleLogout","maxAge"],"mappings":"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","sourcesContent":["import dotenv from 'dotenv';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport { Response, Request } from 'express';\nimport UserModel from '../../models/userModel.js';\nimport UserNotFound from '../../errors/UserNotFound.js';\nimport Exception from '../../errors/Exception.js';\ndotenv.config();\n\ninterface ProcessEnv {\n  [key: string]: string;\n}\nconst { ACCESS_TOKEN_SECRET, REFRESH_TOKEN_SECRET } = process.env as ProcessEnv;\n\nexport default class AuthController {\n  // on register page\n\n  async handleRegister(\n    req: Request<\n      any,\n      any,\n      { password: string; username: string; email: string; isAdmin?: boolean }\n    >,\n    res: Response\n  ) {\n    const { password, username, email, isAdmin } = req.body;\n    const hashedPassword = await bcrypt.hash(password, 10);\n    console.log('hashedPassword', hashedPassword);\n    const user = new UserModel({\n      username: username,\n      email: email,\n      password: hashedPassword,\n      isAdmin: isAdmin\n    });\n    const newUser = await user.save();\n    console.log('newUser saved :', newUser);\n    res.redirect('/auth/login');\n\n    return res;\n  }\n\n  async handleLogin(\n    req: Request<any, any, { email: string; password: string }>,\n    res: Response\n  ) {\n    const { email, password } = req.body;\n    const user = await UserModel.findOne({ email });\n    // const user = await UserModel.findOne({ email }).select('-refreshToken')\n    if (!user) {\n      throw new UserNotFound();\n    }\n\n    console.log('user', user);\n    if (await bcrypt.compare(req.body.password, user.password)) {\n      const accessToken = jwt.sign({ user }, ACCESS_TOKEN_SECRET, {\n        expiresIn: '200s'\n      }); // fixed secret type error with inteface ProcessEnv\n      const refreshToken = jwt.sign({ user }, REFRESH_TOKEN_SECRET);\n      console.log('handleLogin() ==> access token ===>', accessToken);\n      await UserModel.updateOne(\n        { email },\n        { $addToSet: { refreshToken: refreshToken } }\n      );\n\n      res.cookie('access_token', accessToken, {\n        httpOnly: false\n      });\n      console.log('=====');\n      return {\n        status: 'LOGGED'\n      };\n    }\n    throw new Exception(401, 'Not autorized');\n  }\n\n  handleLogout(req: Request, res: Response) {\n    res.cookie('access_token', '', { maxAge: 0, httpOnly: false });\n    res.redirect('/auth/login')\n    return res\n    \n  }\n}\n"],"file":"authController.js"}