{"version":3,"sources":["../../../src/controllers/auth/authController.ts"],"names":["dotenv","bcrypt","jwt","UserModel","UserNotFound","config","ACCESS_TOKEN_SECRET","REFRESH_TOKEN_SECRET","process","env","AuthController","handleRegister","req","password","username","email","body","hashedPassword","hash","console","log","user","newUser","save","message","handleLogin","res","findOne","compare","accessToken","sign","refreshToken","findOneAndUpdate","$addToSet","cookie","httpOnly","redirect","handleLogout","maxAge"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACAJ,MAAM,CAACK,MAAP;AAKA,MAAM;AAAEC,EAAAA,mBAAF;AAAuBC,EAAAA;AAAvB,IAAgDC,OAAO,CAACC,GAA9D;AAEA,eAAe,MAAMC,cAAN,CAAqB;AAGd,QAAdC,cAAc,CAACC,GAAD,EAAe;AACjC,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,QAAZ;AAAsBC,MAAAA;AAAtB,QAAgCH,GAAG,CAACI,IAA1C;AACA,UAAMC,cAAc,GAAG,MAAMhB,MAAM,CAACiB,IAAP,CAAYL,QAAZ,EAAsB,EAAtB,CAA7B;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDH,cAAnD;AACA,UAAMI,IAAI,GAAG,IAAIlB,SAAJ,CAAc;AACzBW,MAAAA,QAAQ,EAAEA,QADe;AAEzBC,MAAAA,KAAK,EAAEA,KAFkB;AAGzBF,MAAAA,QAAQ,EAAEI;AAHe,KAAd,CAAb;AAKA,UAAMK,OAAO,GAAG,MAAMD,IAAI,CAACE,IAAL,EAAtB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCE,OAApC;AAEA,WAAO;AAAEE,MAAAA,OAAO,EAAE,wBAAX;AAAqCH,MAAAA,IAAI,EAAEC,OAAO,CAACR;AAAnD,KAAP;AACD;;AAEgB,QAAXW,WAAW,CAACb,GAAD,EAA8Dc,GAA9D,EAA2F;AAC1G,UAAM;AAAEX,MAAAA,KAAF;AAASF,MAAAA;AAAT,QAAsBD,GAAG,CAACI,IAAhC;AACA,UAAMK,IAAI,GAAG,MAAMlB,SAAS,CAACwB,OAAV,CAAkB;AAAEZ,MAAAA;AAAF,KAAlB,CAAnB;;AACA,QAAI,CAACM,IAAL,EAAW;AACT,YAAM,IAAIjB,YAAJ,EAAN;AACD;;AAEDe,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCC,IAAtC;;AACA,QAAI,MAAMpB,MAAM,CAAC2B,OAAP,CAAef,QAAf,EAAyBQ,IAAI,CAACR,QAA9B,CAAV,EAAmD;AACjD,YAAMgB,WAAW,GAAG3B,GAAG,CAAC4B,IAAJ,CAAST,IAAI,CAACN,KAAd,EAAqBT,mBAArB,CAApB;AACA,YAAMyB,YAAY,GAAG7B,GAAG,CAAC4B,IAAJ,CAAST,IAAI,CAACN,KAAd,EAAqBR,oBAArB,CAArB;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CS,WAA7C;AACA,YAAM1B,SAAS,CAAC6B,gBAAV,CAA2B;AAAEjB,QAAAA;AAAF,OAA3B,EAAsC;AAAEkB,QAAAA,SAAS,EAAE;AAAEF,UAAAA,YAAY,EAAEA;AAAhB;AAAb,OAAtC,CAAN;AACAL,MAAAA,GAAG,CAACQ,MAAJ,CAAW,cAAX,EAA2BL,WAA3B,EAAwC;AAACM,QAAAA,QAAQ,EAAC;AAAV,OAAxC,EACCC,QADD,CACU,kBADV;AAKD;AACF;;AAEDC,EAAAA,YAAY,CAACX,GAAD,EAAgB;AAC1BA,IAAAA,GAAG,CAACQ,MAAJ,CAAW,cAAX,EAA2B,EAA3B,EAA+B;AAACI,MAAAA,MAAM,EAAE;AAAT,KAA/B;AACA,WAAO;AAAEd,MAAAA,OAAO,EAAE;AAAX,KAAP;AACD;;AA1CiC","sourcesContent":["import dotenv from 'dotenv';\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport { Response, Request } from 'express';\r\nimport UserModel from '../../models/userModel.js';\r\nimport UserNotFound from '../../errors/UserNotFound.js';\r\ndotenv.config();\r\n\r\ninterface ProcessEnv {\r\n  [key: string]: string\r\n}\r\nconst { ACCESS_TOKEN_SECRET, REFRESH_TOKEN_SECRET } = process.env as ProcessEnv\r\n\r\nexport default class AuthController {\r\n  // on register page\r\n\r\n  async handleRegister(req: Request) {\r\n    const { password, username, email } = req.body;\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    console.log('hashedPassword handleRegister ===> ', hashedPassword)\r\n    const user = new UserModel({\r\n      username: username,\r\n      email: email,\r\n      password: hashedPassword\r\n    });\r\n    const newUser = await user.save();\r\n    console.log('newUser saved ===> :', newUser)\r\n\r\n    return { message: 'successfully registred', user: newUser.username }\r\n  }\r\n\r\n  async handleLogin(req: Request<any, any, { email: string, password: string }>, res: Response): Promise<any> {\r\n    const { email, password } = req.body;\r\n    const user = await UserModel.findOne({ email })\r\n    if (!user) {\r\n      throw new UserNotFound()\r\n    }\r\n\r\n    console.log('user handleLogin ===> ', user)\r\n    if (await bcrypt.compare(password, user.password)) {\r\n      const accessToken = jwt.sign(user.email, ACCESS_TOKEN_SECRET) // fixed secret type error with inteface ProcessEnv\r\n      const refreshToken = jwt.sign(user.email, REFRESH_TOKEN_SECRET)\r\n      console.log('accessToken handleLogin ===> ', accessToken)     \r\n      await UserModel.findOneAndUpdate({ email }, { $addToSet: { refreshToken: refreshToken } })\r\n      res.cookie('access_token', accessToken, {httpOnly:true})\r\n      .redirect('/admin/users/all')\r\n      // .redirect('/admin/profile')\r\n\r\n      // return { message: 'successfully logged', user: loggedUser }\r\n    }\r\n  }\r\n\r\n  handleLogout(res: Response) {\r\n    res.cookie('access_token', '', {maxAge: 0}) // maybe req.cookie\r\n    return { message: 'successfully logged out' }\r\n  }\r\n\r\n}\r\n"],"file":"authController.js"}