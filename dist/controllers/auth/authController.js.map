{"version":3,"sources":["../../../src/controllers/auth/authController.ts"],"names":["dotenv","bcrypt","jwt","UserModel","UserNotFound","config","ACCESS_TOKEN_SECRET","REFRESH_TOKEN_SECRET","process","env","AuthController","handleRegister","req","res","password","username","email","body","hashedPassword","hash","user","newUser","save","console","log","status","redirect","error","json","message","handleLogin","findOne","compare","accessToken","sign","expiresIn","refreshToken","updateOne","$addToSet","cookie","handleLogout"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACAJ,MAAM,CAACK,MAAP;AAKA,MAAM;AAAEC,EAAAA,mBAAF;AAAuBC,EAAAA;AAAvB,IAAgDC,OAAO,CAACC,GAA9D;AAEA,eAAe,MAAMC,cAAN,CAAqB;AAGd,QAAdC,cAAc,CAClBC,GADkB,EAMlBC,GANkB,EAOlB;AACA,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,QAAZ;AAAsBC,MAAAA;AAAtB,QAAgCJ,GAAG,CAACK,IAA1C;AACA,UAAMC,cAAc,GAAG,MAAMjB,MAAM,CAACkB,IAAP,CAAYL,QAAZ,EAAsB,EAAtB,CAA7B;AACA,UAAMM,IAAI,GAAG,IAAIjB,SAAJ,CAAc;AACzBY,MAAAA,QAAQ,EAAEA,QADe;AAEzBC,MAAAA,KAAK,EAAEA,KAFkB;AAGzBF,MAAAA,QAAQ,EAAEI;AAHe,KAAd,CAAb;;AAKA,QAAI;AACF,YAAMG,OAAO,GAAG,MAAMD,IAAI,CAACE,IAAL,EAAtB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,OAA/B;AACAR,MAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,QAAhB,CAAyB,aAAzB;AACD,KAJD,CAIE,OAAOC,KAAP,EAAmB;AACnBd,MAAAA,GAAG,CAACe,IAAJ,CAAS;AAAEC,QAAAA,OAAO,EAAEF,KAAK,CAACE;AAAjB,OAAT;AACD;AACF;;AAEgB,QAAXC,WAAW,CACflB,GADe,EAEfC,GAFe,EAGf;AACA,UAAM;AAAEG,MAAAA,KAAF;AAASF,MAAAA;AAAT,QAAsBF,GAAG,CAACK,IAAhC;AACA,UAAMG,IAAI,GAAG,MAAMjB,SAAS,CAAC4B,OAAV,CAAkB;AAAEf,MAAAA;AAAF,KAAlB,CAAnB;;AACA,QAAI,CAACI,IAAL,EAAW;AACT,YAAM,IAAIhB,YAAJ,EAAN;AACD;;AACD,QAAI;AACFmB,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,IAApB;;AACA,UAAI,MAAMnB,MAAM,CAAC+B,OAAP,CAAelB,QAAf,EAAyBM,IAAI,CAACN,QAA9B,CAAV,EAAmD;AACjD,cAAMmB,WAAW,GAAG/B,GAAG,CAACgC,IAAJ,CAASd,IAAT,EAAed,mBAAf,EAAoC;AACtD6B,UAAAA,SAAS,EAAE;AAD2C,SAApC,CAApB;AAGA,cAAMC,YAAY,GAAGlC,GAAG,CAACgC,IAAJ,CAASd,IAAT,EAAeb,oBAAf,CAArB;AACA,cAAMJ,SAAS,CAACkC,SAAV,CACJ;AAAErB,UAAAA;AAAF,SADI,EAEJ;AAAEsB,UAAAA,SAAS,EAAE;AAAEF,YAAAA,YAAY,EAAEA;AAAhB;AAAb,SAFI,CAAN;AAIAvB,QAAAA,GAAG,CACA0B,MADH,CACU,cADV,EAC0BN,WAD1B,EAEGR,MAFH,CAEU,GAFV,EAGGC,QAHH,CAGY,eAHZ;AAID;AACF,KAhBD,CAgBE,OAAOC,KAAP,EAAmB;AACnBJ,MAAAA,OAAO,CAACI,KAAR,CAAcA,KAAd;AACAd,MAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAEF,KAAK,CAACE;AAAjB,OAArB;AACD;AACF;;AAEDW,EAAAA,YAAY,CAAC3B,GAAD,EAAgB;AAC1BA,IAAAA,GAAG,CAAC0B,MAAJ,CAAW,cAAX,EAA2B,EAA3B,EAA+Bb,QAA/B,CAAwC,aAAxC;AACD;;AA5DiC","sourcesContent":["import dotenv from 'dotenv';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport { Response, Request } from 'express';\nimport UserModel from '../../models/userModel.js';\nimport UserNotFound from '../../errors/UserNotFound';\ndotenv.config();\n\ninterface ProcessEnv {\n  [key: string]: string;\n}\nconst { ACCESS_TOKEN_SECRET, REFRESH_TOKEN_SECRET } = process.env as ProcessEnv;\n\nexport default class AuthController {\n  // on register page\n\n  async handleRegister(\n    req: Request<\n      any,\n      any,\n      { password: string; username: string; email: string }\n    >,\n    res: Response\n  ) {\n    const { password, username, email } = req.body;\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const user = new UserModel({\n      username: username,\n      email: email,\n      password: hashedPassword\n    });\n    try {\n      const newUser = await user.save();\n      console.log('newUser saved :', newUser);\n      res.status(201).redirect('/user/login');\n    } catch (error: any) {\n      res.json({ message: error.message });\n    }\n  }\n\n  async handleLogin(\n    req: Request<any, any, { email: string; password: string }>,\n    res: Response\n  ) {\n    const { email, password } = req.body;\n    const user = await UserModel.findOne({ email });\n    if (!user) {\n      throw new UserNotFound();\n    }\n    try {\n      console.log('user', user);\n      if (await bcrypt.compare(password, user.password)) {\n        const accessToken = jwt.sign(user, ACCESS_TOKEN_SECRET, {\n          expiresIn: '7d'\n        }); // fixed secret type error with inteface ProcessEnv\n        const refreshToken = jwt.sign(user, REFRESH_TOKEN_SECRET);\n        await UserModel.updateOne(\n          { email },\n          { $addToSet: { refreshToken: refreshToken } }\n        );\n        res\n          .cookie('access_token', accessToken)\n          .status(200)\n          .redirect('/user/profile');\n      }\n    } catch (error: any) {\n      console.error(error);\n      res.status(500).json({ message: error.message });\n    }\n  }\n\n  handleLogout(res: Response) {\n    res.cookie('access_token', '').redirect('/user/login'); // maybe req.cookie\n  }\n}\n"],"file":"authController.js"}