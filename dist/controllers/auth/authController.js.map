{"version":3,"sources":["../../../src/controllers/auth/authController.ts"],"names":["dotenv","bcrypt","jwt","UserModel","UserNotFound","config","ACCESS_TOKEN_SECRET","REFRESH_TOKEN_SECRET","process","env","AuthController","handleRegister","req","res","password","username","email","body","hashedPassword","hash","user","newUser","save","console","log","status","redirect","error","json","message","handleLogin","findOne","compare","accessToken","sign","expiresIn","refreshToken","updateOne","$addToSet","cookie","handleLogout"],"mappings":"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","sourcesContent":["import dotenv from 'dotenv';\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport { Response, Request} from 'express';\r\nimport UserModel from '../../models/userModel.js';\r\nimport UserNotFound from '../../errors/UserNotFound';\r\ndotenv.config();\r\n\r\ninterface ProcessEnv {\r\n  [key: string]: string \r\n}\r\nconst {ACCESS_TOKEN_SECRET, REFRESH_TOKEN_SECRET}  = process.env as ProcessEnv\r\n\r\nexport default class AuthController {\r\n  // on register page\r\n  \r\n  async handleRegister(req: Request, res: Response) {\r\n    const { password, username, email } = req.body;\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    const user = new UserModel({\r\n      username: username,\r\n      email: email,\r\n      password: hashedPassword\r\n    });\r\n    try {\r\n      const newUser = await user.save();\r\n      console.log('newUser saved :', newUser)\r\n      res.status(201).redirect('/user/login')\r\n    } catch (error: any) {\r\n      res.json({ message: error.message })\r\n    }\r\n  }\r\n\r\n   async handleLogin(req: Request<any,any,{email:string, password:string}>, res:Response) {\r\n     const {email, password} = req.body ;\r\n     const user = await UserModel.findOne({email})\r\n     if(!user){\r\n       throw new UserNotFound()\r\n     } \r\n     try {\r\n       console.log('user', user)\r\n       if(await bcrypt.compare(password, user.password)){\r\n        const accessToken =  jwt.sign(user, ACCESS_TOKEN_SECRET, {expiresIn: '7d'}) // fixed secret type error with inteface ProcessEnv\r\n        const refreshToken = jwt.sign(user, REFRESH_TOKEN_SECRET)\r\n        await UserModel.updateOne({email}, {$addToSet: {refreshToken: refreshToken}})\r\n        res.cookie('access_token', accessToken)\r\n        .status(200)\r\n        .redirect('/user/profile')\r\n       }\r\n       \r\n     } catch (error: any) {\r\n       console.error(error)\r\n       res.status(500).json({message: error.message})\r\n     }\r\n   }\r\n\r\n    handleLogout(res: Response) {\r\n     res.cookie('access_token', '').redirect('/user/login') // maybe req.cookie\r\n   }\r\n\r\n}\r\n"],"file":"authController.js"}