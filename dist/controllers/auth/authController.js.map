{"version":3,"sources":["../../../src/controllers/auth/authController.ts"],"names":["dotenv","bcrypt","jwt","UserModel","UserNotFound","config","ACCESS_TOKEN_SECRET","REFRESH_TOKEN_SECRET","process","env","AuthController","handleRegister","req","res","password","username","email","body","hashedPassword","hash","user","newUser","save","console","log","redirect","handleLogin","findOne","compare","accessToken","sign","expiresIn","refreshToken","updateOne","$addToSet","cookie","send","handleLogout"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACAJ,MAAM,CAACK,MAAP;AAKA,MAAM;AAAEC,EAAAA,mBAAF;AAAuBC,EAAAA;AAAvB,IAAgDC,OAAO,CAACC,GAA9D;AAEA,eAAe,MAAMC,cAAN,CAAqB;AAGd,QAAdC,cAAc,CAACC,GAAD,EAAeC,GAAf,EAA8B;AAChD,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,QAAZ;AAAsBC,MAAAA;AAAtB,QAAgCJ,GAAG,CAACK,IAA1C;AACA,UAAMC,cAAc,GAAG,MAAMjB,MAAM,CAACkB,IAAP,CAAYL,QAAZ,EAAsB,EAAtB,CAA7B;AACA,UAAMM,IAAI,GAAG,IAAIjB,SAAJ,CAAc;AACzBY,MAAAA,QAAQ,EAAEA,QADe;AAEzBC,MAAAA,KAAK,EAAEA,KAFkB;AAGzBF,MAAAA,QAAQ,EAAEI;AAHe,KAAd,CAAb;AAKA,UAAMG,OAAO,GAAG,MAAMD,IAAI,CAACE,IAAL,EAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,OAA/B;AACAR,IAAAA,GAAG,CAACY,QAAJ,CAAa,aAAb;AACD;;AAEgB,QAAXC,WAAW,CACfd,GADe,EAEfC,GAFe,EAGf;AACA,UAAM;AAAEG,MAAAA,KAAF;AAASF,MAAAA;AAAT,QAAsBF,GAAG,CAACK,IAAhC;AACA,UAAMG,IAAI,GAAG,MAAMjB,SAAS,CAACwB,OAAV,CAAkB;AAAEX,MAAAA;AAAF,KAAlB,CAAnB;;AAEA,QAAI,CAACI,IAAL,EAAW;AACT,YAAM,IAAIhB,YAAJ,EAAN;AACD;;AAEDmB,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,IAApB;;AACA,QAAI,MAAMnB,MAAM,CAAC2B,OAAP,CAAed,QAAf,EAAyBM,IAAI,CAACN,QAA9B,CAAV,EAAmD;AACjD,YAAMe,WAAW,GAAG3B,GAAG,CAAC4B,IAAJ,CAAS;AAAEV,QAAAA;AAAF,OAAT,EAAmBd,mBAAnB,EAAwC;AAC1DyB,QAAAA,SAAS,EAAE;AAD+C,OAAxC,CAApB;AAGA,YAAMC,YAAY,GAAG9B,GAAG,CAAC4B,IAAJ,CAAS;AAAEV,QAAAA;AAAF,OAAT,EAAmBb,oBAAnB,CAArB;AACAgB,MAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDK,WAAnD;AACA,YAAM1B,SAAS,CAAC8B,SAAV,CACJ;AAAEjB,QAAAA;AAAF,OADI,EAEJ;AAAEkB,QAAAA,SAAS,EAAE;AAAEF,UAAAA,YAAY,EAAEA;AAAhB;AAAb,OAFI,CAAN;AAIAnB,MAAAA,GAAG,CAACsB,MAAJ,CAAW,cAAX,EAA2BN,WAA3B,EAAwCO,IAAxC,CAA6C,QAA7C,EACCX,QADD,CACU,gBADV;AAED;AACF;;AAEDY,EAAAA,YAAY,CAACxB,GAAD,EAAgB;AAC1BA,IAAAA,GAAG,CAACsB,MAAJ,CAAW,cAAX,EAA2B,EAA3B,EAA+BV,QAA/B,CAAwC,aAAxC;AACD;;AA7CiC","sourcesContent":["import dotenv from 'dotenv';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport { Response, Request } from 'express';\nimport UserModel from '../../models/userModel.js';\nimport UserNotFound from '../../errors/UserNotFound.js';\ndotenv.config();\n\ninterface ProcessEnv {\n  [key: string]: string;\n}\nconst { ACCESS_TOKEN_SECRET, REFRESH_TOKEN_SECRET } = process.env as ProcessEnv;\n\nexport default class AuthController {\n  // on register page\n\n  async handleRegister(req: Request, res: Response) {\n    const { password, username, email } = req.body;\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const user = new UserModel({\n      username: username,\n      email: email,\n      password: hashedPassword\n    });\n    const newUser = await user.save();\n    console.log('newUser saved :', newUser);\n    res.redirect('/auth/login');\n  }\n\n  async handleLogin(\n    req: Request<any, any, { email: string; password: string }>,\n    res: Response\n  ) {\n    const { email, password } = req.body;\n    const user = await UserModel.findOne({ email });\n    // const user = await UserModel.findOne({ email }).select('-refreshToken')\n    if (!user) {\n      throw new UserNotFound();\n    }\n\n    console.log('user', user);\n    if (await bcrypt.compare(password, user.password)) {\n      const accessToken = jwt.sign({ user }, ACCESS_TOKEN_SECRET, {\n        expiresIn: '7d'\n      }); // fixed secret type error with inteface ProcessEnv\n      const refreshToken = jwt.sign({ user }, REFRESH_TOKEN_SECRET);\n      console.log('handleLogin() ==> access token ===>', accessToken);\n      await UserModel.updateOne(\n        { email },\n        { $addToSet: { refreshToken: refreshToken } }\n      );\n      res.cookie('access_token', accessToken).send('logged')\n      .redirect('/admin/profile')\n    }\n  }\n\n  handleLogout(res: Response) {\n    res.cookie('access_token', '').redirect('/auth/login'); // maybe req.cookie\n  }\n}\n"],"file":"authController.js"}