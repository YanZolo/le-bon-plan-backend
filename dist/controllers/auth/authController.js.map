{"version":3,"sources":["../../../src/controllers/auth/authController.ts"],"names":["dotenv","bcrypt","jwt","UserModel","UserNotFound","Exception","config","ACCESS_TOKEN_SECRET","REFRESH_TOKEN_SECRET","process","env","AuthController","handleRegister","req","res","password","username","email","isAdmin","body","hashedPassword","hash","console","log","user","newUser","save","redirect","handleLogin","findOne","compare","accessToken","sign","expiresIn","app","locals","cookie","httpOnly","secure","maxAge","handleLogout","clearCookie","headers"],"mappings":"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","sourcesContent":["import dotenv from 'dotenv';\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport { Response, Request, request } from 'express';\r\nimport UserModel from '../../models/userModel.js';\r\nimport UserNotFound from '../../errors/UserNotFound.js';\r\nimport Exception from '../../errors/Exception.js';\r\ndotenv.config();\r\n\r\ninterface ProcessEnv {\r\n  [key: string]: string;\r\n}\r\nconst { ACCESS_TOKEN_SECRET, REFRESH_TOKEN_SECRET } = process.env as ProcessEnv;\r\n\r\nexport default class AuthController {\r\n  // on register page\r\n\r\n  async handleRegister(\r\n    req: Request<\r\n      any,\r\n      any,\r\n      { password: string; username: string; email: string; isAdmin?: boolean }\r\n    >,\r\n    res: Response\r\n  ) {\r\n    const { password, username, email, isAdmin } = req.body;\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    console.log('hashedPassword', hashedPassword);\r\n    const user = new UserModel({\r\n      username: username,\r\n      email: email,\r\n      password: hashedPassword,\r\n      isAdmin: isAdmin\r\n    });\r\n    const newUser = await user.save();\r\n    console.log('newUser saved :', newUser);\r\n    res.redirect('/login');\r\n\r\n    return res;\r\n  }\r\n\r\n  async handleLogin(\r\n    req: Request<any, any, { email: string; password: string }>,\r\n    res: Response\r\n  ) {\r\n    const { email, password } = req.body;\r\n    const user = await UserModel.findOne({ email });\r\n    if (!user) {\r\n      throw new UserNotFound();\r\n    }\r\n\r\n    if (await bcrypt.compare(password, user.password)) {\r\n\r\n      const accessToken = jwt.sign({ user }, ACCESS_TOKEN_SECRET, {\r\n        expiresIn: '200s'\r\n      }); // fixed secret type error with inteface ProcessEnv\r\n      // const refreshToken = jwt.sign({ user }, REFRESH_TOKEN_SECRET);\r\n      // console.log('handleLogin() ==> access token ===>', accessToken);\r\n\r\n      // await UserModel.updateOne(\r\n      //   { email },\r\n      //   { $addToSet: { refreshToken: refreshToken } }\r\n      // );\r\n\r\n      res.app.locals = { user: user.username }\r\n      res.cookie('access_token', accessToken, {\r\n        httpOnly: true,\r\n        secure: true,\r\n        maxAge: 1000000\r\n      });\r\n      console.log('=====');\r\n      res.redirect('/profile')\r\n      return res\r\n      // return {\r\n      //   status: 'LOGGED'\r\n      // };\r\n    }\r\n    throw new Exception(401, 'Not autorized');\r\n  }\r\n\r\n  handleLogout(req: Request, res: Response) {\r\n    res.clearCookie('access_token', {\r\n      httpOnly: true,\r\n      secure: true,\r\n      maxAge: 0\r\n    });\r\n    res.redirect('/login')\r\n    console.log('handleLogout() req.headers', req.headers)\r\n    return res\r\n\r\n  }\r\n}\r\n"],"file":"authController.js"}