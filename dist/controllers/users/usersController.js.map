{"version":3,"sources":["../../../src/controllers/users/usersController.ts"],"names":["UserModel","UserNotFound","UserController","getAllUsers","find","getUser","params","id","user","findById","addUser","body","username","email","password","newUser","save","updateUser","req","userUpdated","deleteUser","deleteOne","_id"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,2BAAtB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AAGA,OAAO,MAAMC,cAAN,CAAqB;AAET,QAAXC,WAAW,GAAG;AAClB,WAAOH,SAAS,CAACI,IAAV,EAAP;AACD;;AAEY,QAAPC,OAAO,CAAC;AAAEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AAAV,GAAD,EAA8C;AACzD,UAAMC,IAAI,GAAG,MAAMR,SAAS,CAACS,QAAV,CAAmBF,EAAnB,CAAnB;;AACA,QAAI,CAACC,IAAL,EAAW;AACT,YAAM,IAAIP,YAAJ,EAAN;AACD;;AACD,WAAOO,IAAP;AACD;;AAEY,QAAPE,OAAO,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,KAAZ;AAAmBC,MAAAA;AAAnB;AAAR,GAAD,EAA8G;AACzH,UAAMC,OAAO,GAAG,IAAIf,SAAJ,CAAc;AAC5BY,MAAAA,QAD4B;AAE5BC,MAAAA,KAF4B;AAG5BC,MAAAA;AAH4B,KAAd,CAAhB;AAKA,WAAOC,OAAO,CAACC,IAAR,EAAP;AACD;;AAEe,QAAVC,UAAU,CACdC,GADc,EAEd;AACA,UAAMV,IAAI,GAAG,MAAM,KAAKH,OAAL,CAAaa,GAAb,CAAnB;AACA,UAAM;AAAEN,MAAAA,QAAF;AAAYC,MAAAA,KAAZ;AAAmBC,MAAAA;AAAnB,QAAgCI,GAAG,CAACP,IAA1C;;AACA,QAAIC,QAAQ,IAAIA,QAAQ,KAAKJ,IAAI,CAACI,QAAlC,EAA4C;AAC1CJ,MAAAA,IAAI,CAACI,QAAL,GAAgBA,QAAhB;AACD;;AACD,QAAIC,KAAK,IAAIA,KAAK,KAAKL,IAAI,CAACK,KAA5B,EAAmC;AACjCL,MAAAA,IAAI,CAACK,KAAL,GAAaA,KAAb;AACD;;AACD,QAAIC,QAAQ,IAAIA,QAAQ,KAAKN,IAAI,CAACM,QAAlC,EAA4C;AAC1CN,MAAAA,IAAI,CAACM,QAAL,GAAgBA,QAAhB;AACD;;AACD,UAAMK,WAAW,GAAG,IAAInB,SAAJ,CAAcQ,IAAd,CAApB;AACA,WAAO,MAAMW,WAAW,CAACH,IAAZ,EAAb;AACD;;AAEe,QAAVI,UAAU,CAACF,GAAD,EAAyC;AACvD,UAAMV,IAAI,GAAG,MAAM,KAAKH,OAAL,CAAaa,GAAb,CAAnB;AACA,UAAMlB,SAAS,CAACqB,SAAV,CAAoB;AAAEC,MAAAA,GAAG,EAAEd,IAAI,CAACc;AAAZ,KAApB,CAAN;AACD;;AA5CyB","sourcesContent":["import UserModel from '../../models/userModel.js';\r\nimport UserNotFound from '../../errors/UserNotFound.js';\r\nimport { Request } from 'express';\r\n\r\nexport class UserController {\r\n  // return all users\r\n  async getAllUsers() {\r\n    return UserModel.find();\r\n  }\r\n\r\n  async getUser({ params: { id } }: Request<{ id: string }>) {\r\n    const user = await UserModel.findById(id);\r\n    if (!user) {\r\n      throw new UserNotFound();\r\n    }\r\n    return user;\r\n  }\r\n\r\n  async addUser({ body: { username, email, password } }: Request<any,any,{username:string, email:string, password: string}>) {\r\n    const newUser = new UserModel({\r\n      username,\r\n      email,\r\n      password\r\n    });\r\n    return newUser.save();\r\n  }\r\n\r\n  async updateUser(\r\n    req: Request<any, any, { username: string; email: string, password: string }>\r\n  ) {\r\n    const user = await this.getUser(req);\r\n    const { username, email, password } = req.body;\r\n    if (username && username !== user.username) {\r\n      user.username = username;\r\n    }\r\n    if (email && email !== user.email) {\r\n      user.email = email;\r\n    }\r\n    if (password && password !== user.password) {\r\n      user.password = password;\r\n    }\r\n    const userUpdated = new UserModel(user);\r\n    return await userUpdated.save();\r\n  }\r\n\r\n  async deleteUser(req: Request<{ id: string }, any, any>) {\r\n    const user = await this.getUser(req);\r\n    await UserModel.deleteOne({ _id: user._id });\r\n  }\r\n}\r\n"],"file":"usersController.js"}