{"version":3,"sources":["../../../src/controllers/users/usersController.spec.ts"],"names":["userModel","UserController","jest","describe","it","expect","beforeEach","mock","findById","mockClear","userController","find","mockResolvedValue","result","getAllUsers","toEqual","username","getUser","params","id","toHaveBeenCalledWith","currentError","error","message","status","name","save","fn","_id","email","password","mockImplementation","addUser","body","toHaveBeenCalled","toHaveReturned","updateUser","toBeCalled","req","spyOn","deleteUser","deleteOne","toBeCalledTimes","undefined"],"mappings":"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","sourcesContent":["import userModel from '../../models/userModel.js';\nimport { UserController } from './usersController.js';\nimport { jest, describe, it, expect, beforeEach } from '@jest/globals';\nimport { Request } from 'express';\n\njest.mock('../../models/userModel.js');\n\ndescribe('useController', () => {\n  beforeEach(() => {\n    (userModel.findById as jest.Mock).mockClear();\n  });\n  describe('getAllUsers()', () => {\n    it('should return an empty array', async () => {\n      // given\n      const userController = new UserController();\n      (userModel.find as jest.Mock).mockResolvedValue([]);\n      // when\n      const result = await userController.getAllUsers();\n      // then\n      expect(result).toEqual([]);\n    });\n  });\n  describe('getUser()', () => {\n    it('should return one user', async () => {\n      // given\n      const userController = new UserController();\n      (userModel.findById as jest.Mock).mockResolvedValue([\n        {\n          username: 'soso'\n        }\n      ]);\n      // when\n      const result = await userController.getUser({\n        params: { id: 'kjglmdfk' }\n      } as Request<{ id: string }>);\n      // then\n      expect(result).toEqual([\n        {\n          username: 'soso'\n        }\n      ]);\n      expect(userModel.findById).toHaveBeenCalledWith('kjglmdfk');\n    });\n    it(\"should throw 'User Not Found'\", async () => {\n      // GIVEN\n      const userController = new UserController();\n      (userModel.findById as jest.Mock).mockResolvedValue(null);\n      // WHEN\n      let currentError: any;\n      try {\n        await userController.getUser({\n          params: { id: 'kjjfdfdfdkf' }\n        } as Request<{ id: string }>);\n      } catch (error) {\n        currentError = error;\n      }\n      // THEN\n      expect(currentError.message).toEqual('User Not Found');\n      expect(currentError.status).toEqual(404);\n      expect(currentError.name).toEqual('NOT_FOUND');\n    });\n  });\n\n  describe('addUser()', () => {\n    it('should add new user in database', async () => {\n      // given\n      const userController = new UserController();\n      const save = jest.fn(() => {\n        return {\n          _id: 'some id addUser',\n          username: 'test addUser',\n          email: 'test@addUser.com',\n          password: 'test password'\n        };\n      });\n      (userModel as jest.MockedFunction<any>).mockImplementation(() => {\n        return {\n          save\n        };\n      });\n      // when\n      const result = await userController.addUser({\n        body: {\n          username: 'test addUser',\n          email: 'test@addUser.com',\n          password: 'test password'\n        }\n      } as Request<{ username: string; email: string }>);\n      // then\n      expect(userModel).toHaveBeenCalledWith({\n        username: 'test addUser',\n        email: 'test@addUser.com',\n        password: 'test password'\n      });\n      expect(save).toHaveBeenCalled();\n      expect(save).toHaveReturned();\n      expect(result).toEqual({\n        _id: 'some id addUser',\n        username: 'test addUser',\n        email: 'test@addUser.com',\n        password: 'test password'\n      });\n    });\n  });\n\n  describe('udpdateUser()', () => {\n    it('should update a user', async () => {\n      // given\n      const userController = new UserController();\n      (userModel.findById as jest.Mock).mockResolvedValue({\n        _id: 'some id updateUser',\n        username: 'old username',\n        email: 'old email',\n        password: 'old password'\n      });\n      const save = (jest.fn() as jest.Mock).mockResolvedValue({\n        _id: 'some id updateUser',\n        username: 'new username',\n        email: 'new email',\n        password: 'new password'\n      });\n      (userModel as jest.MockedFunction<any>).mockImplementation(() => {\n        return {\n          save\n        };\n      });\n      // when\n      const result = await userController.updateUser({\n        params: { id: 'some id updateUser' },\n        body: {\n          username: 'new username',\n          email: 'new email',\n          password: 'new password'\n        }\n      } as Request<{ id: string }, any, { username: string; email: string; password: string }>);\n      // then\n      expect(save).toBeCalled();\n      expect(save).toHaveReturned();\n      expect(result).toEqual({\n        _id: 'some id updateUser',\n        username: 'new username',\n        email: 'new email',\n        password: 'new password'\n      });\n    });\n\n    describe('deleteUser()', () => {\n      it('should delete a user', async () => {\n        // given\n        const req = {\n          params: { id: 'id deleteUser' }\n        };\n        const userController = new UserController();\n        jest.spyOn(userController, 'getUser').mockResolvedValue({\n          _id: 'id deleteUser',\n          username: 'new username',\n          email: 'new email',\n          password: 'new password'\n        } as any);\n\n        // when\n        const result = await userController.deleteUser(\n          req as Request<{ id: string }, any, any>\n        );\n\n        // then\n        expect(userController.getUser).toHaveBeenCalledWith(req);\n        expect(userModel.deleteOne).toBeCalledTimes(1);\n        expect(userModel.deleteOne).toHaveBeenCalledWith({\n          _id: 'id deleteUser'\n        });\n        expect(result).toEqual(undefined);\n      });\n    });\n  });\n});\n"],"file":"usersController.spec.js"}