{"version":3,"sources":["../../../src/controllers/products/productsController.spec.ts"],"names":["productModel","ProductsController","jest","describe","it","expect","beforeEach","mock","findById","mockClear","productController","find","mockResolvedValue","result","getProducts","toEqual","title","getProduct","params","id","toHaveBeenCalledWith","actualError","error","message","status","name","save","fn","_id","price","mockImplementation","addProduct","body","toHaveBeenCalled","toHaveReturned","updateProduct","toBeCalled","req","spyOn","deleteProduct","undefined","deleteOne","toHaveBeenCalledTimes"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,8BAAzB;AACA,SAASC,kBAAT,QAAmC,yBAAnC;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,EAAzB,EAA6BC,MAA7B,EAAqCC,UAArC,QAAuD,eAAvD;AAGAJ,IAAI,CAACK,IAAL,CAAU,2BAAV;AAEAJ,QAAQ,CAAC,mBAAD,EAAsB,MAAM;AAClCG,EAAAA,UAAU,CAAC,MAAM;AACdN,IAAAA,YAAY,CAACQ,QAAd,CAAqCC,SAArC;AACD,GAFS,CAAV;AAGAN,EAAAA,QAAQ,CAAC,eAAD,EAAkB,MAAM;AAC9BC,IAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAY;AAE1C,YAAMM,iBAAiB,GAAG,IAAIT,kBAAJ,EAA1B;AACCD,MAAAA,YAAY,CAACW,IAAd,CAAiCC,iBAAjC,CAAmD,EAAnD;AAEA,YAAMC,MAAM,GAAG,MAAMH,iBAAiB,CAACI,WAAlB,EAArB;AAEAT,MAAAA,MAAM,CAACQ,MAAD,CAAN,CAAeE,OAAf,CAAuB,EAAvB;AACD,KARC,CAAF;AASD,GAVO,CAAR;AAYAZ,EAAAA,QAAQ,CAAC,cAAD,EAAiB,MAAM;AAC7BC,IAAAA,EAAE,CAAC,2CAAD,EAA8C,YAAY;AAE1D,YAAMM,iBAAiB,GAAG,IAAIT,kBAAJ,EAA1B;AACCD,MAAAA,YAAY,CAACQ,QAAd,CAAqCI,iBAArC,CAAuD,CACrD;AACEI,QAAAA,KAAK,EAAE;AADT,OADqD,CAAvD;AAMA,YAAMH,MAAM,GAAG,MAAMH,iBAAiB,CAACO,UAAlB,CAA6B;AAChDC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,EAAE,EAAE;AAAN;AADwC,OAA7B,CAArB;AAIAd,MAAAA,MAAM,CAACQ,MAAD,CAAN,CAAeE,OAAf,CAAuB,CACrB;AACEC,QAAAA,KAAK,EAAE;AADT,OADqB,CAAvB;AAKAX,MAAAA,MAAM,CAACL,YAAY,CAACQ,QAAd,CAAN,CAA2CY,oBAA3C,CACE,iBADF;AAGD,KArBC,CAAF;AAuBAhB,IAAAA,EAAE,CAAC,sCAAD,EAAyC,YAAY;AAErD,YAAMM,iBAAiB,GAAG,IAAIT,kBAAJ,EAA1B;AACCD,MAAAA,YAAY,CAACQ,QAAd,CAAqCI,iBAArC,CAAuD,IAAvD;AAEA,UAAIS,WAAJ;;AACA,UAAI;AACF,cAAMX,iBAAiB,CAACO,UAAlB,CAA6B;AACjCC,UAAAA,MAAM,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AADyB,SAA7B,CAAN;AAGD,OAJD,CAIE,OAAOG,KAAP,EAAc;AACdD,QAAAA,WAAW,GAAGC,KAAd;AACD;;AAEDjB,MAAAA,MAAM,CAACgB,WAAW,CAACE,OAAb,CAAN,CAA4BR,OAA5B,CAAoC,mBAApC;AACAV,MAAAA,MAAM,CAACgB,WAAW,CAACG,MAAb,CAAN,CAA2BT,OAA3B,CAAmC,GAAnC;AACAV,MAAAA,MAAM,CAACgB,WAAW,CAACI,IAAb,CAAN,CAAyBV,OAAzB,CAAiC,WAAjC;AACD,KAjBC,CAAF;AAkBD,GA1CO,CAAR;AA4CAZ,EAAAA,QAAQ,CAAC,cAAD,EAAiB,MAAM;AAC7BC,IAAAA,EAAE,CAAC,sCAAD,EAAyC,YAAY;AAErD,YAAMM,iBAAiB,GAAG,IAAIT,kBAAJ,EAA1B;AACA,YAAMyB,IAAI,GAAIxB,IAAI,CAACyB,EAAL,EAAD,CAAyBf,iBAAzB,CAA2C;AACtDgB,QAAAA,GAAG,EAAE,IADiD;AAEtDC,QAAAA,KAAK,EAAE,EAF+C;AAGtDb,QAAAA,KAAK,EAAE;AAH+C,OAA3C,CAAb;AAKChB,MAAAA,YAAD,CAA2C8B,kBAA3C,CAA8D,MAAM;AAClE,eAAO;AACLJ,UAAAA;AADK,SAAP;AAGD,OAJD;AAMA,YAAMb,MAAM,GAAG,MAAMH,iBAAiB,CAACqB,UAAlB,CAA6B;AAChDC,QAAAA,IAAI,EAAE;AACJH,UAAAA,KAAK,EAAE,EADH;AAEJb,UAAAA,KAAK,EAAE;AAFH;AAD0C,OAA7B,CAArB;AAOAX,MAAAA,MAAM,CAACL,YAAD,CAAN,CAAqBoB,oBAArB,CAA0C;AACxCS,QAAAA,KAAK,EAAE,EADiC;AAExCb,QAAAA,KAAK,EAAE;AAFiC,OAA1C;AAIAX,MAAAA,MAAM,CAACqB,IAAD,CAAN,CAAaO,gBAAb;AACA5B,MAAAA,MAAM,CAACqB,IAAD,CAAN,CAAaQ,cAAb;AACA7B,MAAAA,MAAM,CAACQ,MAAD,CAAN,CAAeE,OAAf,CAAuB;AACrBa,QAAAA,GAAG,EAAE,IADgB;AAErBC,QAAAA,KAAK,EAAE,EAFc;AAGrBb,QAAAA,KAAK,EAAE;AAHc,OAAvB;AAKD,KAhCC,CAAF;AAiCD,GAlCO,CAAR;AAoCAb,EAAAA,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChCC,IAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAY;AAExC,YAAMM,iBAAiB,GAAG,IAAIT,kBAAJ,EAA1B;AACCD,MAAAA,YAAY,CAACQ,QAAd,CAAqCI,iBAArC,CAAuD;AACrDgB,QAAAA,GAAG,EAAE,SADgD;AAErDZ,QAAAA,KAAK,EAAE,0BAF8C;AAGrDa,QAAAA,KAAK,EAAE;AAH8C,OAAvD;AAKA,YAAMH,IAAI,GAAIxB,IAAI,CAACyB,EAAL,EAAD,CAAyBf,iBAAzB,CAA2C;AACtDgB,QAAAA,GAAG,EAAE,SADiD;AAEtDZ,QAAAA,KAAK,EAAE,0BAF+C;AAGtDa,QAAAA,KAAK,EAAE;AAH+C,OAA3C,CAAb;AAKC7B,MAAAA,YAAD,CAA2C8B,kBAA3C,CAA8D,MAAM;AAClE,eAAO;AACLJ,UAAAA;AADK,SAAP;AAGD,OAJD;AAMA,YAAMb,MAAM,GAAG,MAAMH,iBAAiB,CAACyB,aAAlB,CAAgC;AACnDjB,QAAAA,MAAM,EAAE;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAD2C;AAEnDa,QAAAA,IAAI,EAAE;AAAEhB,UAAAA,KAAK,EAAE,0BAAT;AAAqCa,UAAAA,KAAK,EAAE;AAA5C;AAF6C,OAAhC,CAArB;AAKAxB,MAAAA,MAAM,CAACL,YAAY,CAACQ,QAAd,CAAN,CAA8BY,oBAA9B,CAAmD,SAAnD;AACAf,MAAAA,MAAM,CAACqB,IAAD,CAAN,CAAaU,UAAb;AACA/B,MAAAA,MAAM,CAACqB,IAAD,CAAN,CAAaQ,cAAb;AACA7B,MAAAA,MAAM,CAACQ,MAAD,CAAN,CAAeE,OAAf,CAAuB;AACrBa,QAAAA,GAAG,EAAE,SADgB;AAErBZ,QAAAA,KAAK,EAAE,0BAFc;AAGrBa,QAAAA,KAAK,EAAE;AAHc,OAAvB;AAKD,KAhCC,CAAF;AAiCD,GAlCO,CAAR;AAoCA1B,EAAAA,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChCC,IAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAY;AAExC,YAAMiC,GAAG,GAAG;AACVnB,QAAAA,MAAM,EAAE;AAAEC,UAAAA,EAAE,EAAE;AAAN;AADE,OAAZ;AAIA,YAAMT,iBAAiB,GAAG,IAAIT,kBAAJ,EAA1B;AACAC,MAAAA,IAAI,CAACoC,KAAL,CAAW5B,iBAAX,EAA8B,YAA9B,EAA4CE,iBAA5C,CAA8D;AAC5DgB,QAAAA,GAAG,EAAE,aADuD;AAE5DZ,QAAAA,KAAK,EAAE,sBAFqD;AAG5Da,QAAAA,KAAK,EAAE;AAHqD,OAA9D;AAOA,YAAMhB,MAAM,GAAG,MAAMH,iBAAiB,CAAC6B,aAAlB,CACnBF,GADmB,CAArB;AAKAhC,MAAAA,MAAM,CAACK,iBAAiB,CAACO,UAAnB,CAAN,CAAqCG,oBAArC,CAA0DiB,GAA1D;AACAhC,MAAAA,MAAM,CAACQ,MAAD,CAAN,CAAeE,OAAf,CAAuByB,SAAvB;AACAnC,MAAAA,MAAM,CAACL,YAAY,CAACyC,SAAd,CAAN,CAA+BC,qBAA/B,CAAqD,CAArD;AACArC,MAAAA,MAAM,CAACL,YAAY,CAACyC,SAAd,CAAN,CAA+BrB,oBAA/B,CAAoD;AAClDQ,QAAAA,GAAG,EAAE;AAD6C,OAApD;AAGD,KAzBC,CAAF;AA0BD,GA3BO,CAAR;AA4BD,CAhKO,CAAR","sourcesContent":["import productModel from '../../models/productModel.js';\nimport { ProductsController } from './productsController.js';\nimport { jest, describe, it, expect, beforeEach } from '@jest/globals';\nimport { Request } from 'express';\n\njest.mock('../../models/productModel');\n\ndescribe('productController', () => {\n  beforeEach(() => {\n    (productModel.findById as jest.Mock).mockClear();\n  });\n  describe('getProducts()', () => {\n    it('should return empty array', async () => {\n      // given\n      const productController = new ProductsController();\n      (productModel.find as jest.Mock).mockResolvedValue([]);\n      // when\n      const result = await productController.getProducts();\n      // then\n      expect(result).toEqual([]);\n    });\n  });\n\n  describe('getProduct()', () => {\n    it('should return a product from productModel', async () => {\n      // given\n      const productController = new ProductsController();\n      (productModel.findById as jest.Mock).mockResolvedValue([\n        {\n          title: 'toto'\n        }\n      ]);\n      // when\n      const result = await productController.getProduct({\n        params: { id: 'gjdkgjdsglksdjg' }\n      } as any);\n      // then\n      expect(result).toEqual([\n        {\n          title: 'toto'\n        }\n      ]);\n      expect(productModel.findById as jest.Mock).toHaveBeenCalledWith(\n        'gjdkgjdsglksdjg'\n      );\n    });\n\n    it('should throw product error not found', async () => {\n      // given\n      const productController = new ProductsController();\n      (productModel.findById as jest.Mock).mockResolvedValue(null);\n      // when\n      let actualError: any;\n      try {\n        await productController.getProduct({\n          params: { id: 'gjdkgjdsglksdjg' }\n        } as Request<{ id: string }>);\n      } catch (error) {\n        actualError = error;\n      }\n      // then\n      expect(actualError.message).toEqual('Product Not Found');\n      expect(actualError.status).toEqual(404);\n      expect(actualError.name).toEqual('NOT_FOUND');\n    });\n  });\n\n  describe('addProduct()', () => {\n    it('should add a new product in database', async () => {\n      // given\n      const productController = new ProductsController();\n      const save = (jest.fn() as jest.Mock).mockResolvedValue({\n        _id: 'id',\n        price: 44,\n        title: 'product 123'\n      });\n      (productModel as jest.MockedFunction<any>).mockImplementation(() => {\n        return {\n          save\n        };\n      });\n      // when\n      const result = await productController.addProduct({\n        body: {\n          price: 44,\n          title: 'product 123'\n        }\n      } as Request<{ price: number; title: string }>);\n      // then\n      expect(productModel).toHaveBeenCalledWith({\n        price: 44,\n        title: 'product 123'\n      });\n      expect(save).toHaveBeenCalled();\n      expect(save).toHaveReturned();\n      expect(result).toEqual({\n        _id: 'id',\n        price: 44,\n        title: 'product 123'\n      });\n    });\n  });\n\n  describe('updateProduct()', () => {\n    it('should update a product', async () => {\n      // given\n      const productController = new ProductsController();\n      (productModel.findById as jest.Mock).mockResolvedValue({\n        _id: 'some-id',\n        title: 'old test updateProduct()',\n        price: 47\n      });\n      const save = (jest.fn() as jest.Mock).mockResolvedValue({\n        _id: 'some-id',\n        title: 'new test updateProduct()',\n        price: 86\n      });\n      (productModel as jest.MockedFunction<any>).mockImplementation(() => {\n        return {\n          save\n        };\n      });\n      // when\n      const result = await productController.updateProduct({\n        params: { id: 'some-id' },\n        body: { title: 'new test updateProduct()', price: 47 }\n      } as Request<{ id: string }, any, { title: string; price: number }>);\n      // then\n      expect(productModel.findById).toHaveBeenCalledWith('some-id');\n      expect(save).toBeCalled();\n      expect(save).toHaveReturned();\n      expect(result).toEqual({\n        _id: 'some-id',\n        title: 'new test updateProduct()',\n        price: 86\n      });\n    });\n  });\n\n  describe('deleteProduct()', () => {\n    it('should delete a product', async () => {\n      // given\n      const req = {\n        params: { id: 'some_id_123' }\n      };\n\n      const productController = new ProductsController();\n      jest.spyOn(productController, 'getProduct').mockResolvedValue({\n        _id: 'some_id_123',\n        title: 'test deleteProduct()',\n        price: 99\n      } as any);\n\n      // when\n      const result = await productController.deleteProduct(\n        req as Request<{ id: string }>\n      );\n\n      // then\n      expect(productController.getProduct).toHaveBeenCalledWith(req);\n      expect(result).toEqual(undefined);\n      expect(productModel.deleteOne).toHaveBeenCalledTimes(1);\n      expect(productModel.deleteOne).toHaveBeenCalledWith({\n        _id: 'some_id_123'\n      });\n    });\n  });\n});\n"],"file":"productsController.spec.js"}