{"version":3,"sources":["../../../src/controllers/products/productsController.spec.ts"],"names":["productModel","ProductsController","jest","describe","it","expect","beforeEach","mock","findById","mockClear","productController","find","mockResolvedValue","result","getProducts","toEqual","title","getProduct","params","id","toHaveBeenCalledWith","undefined","actualError","error","message","status","name","save","fn","_id","price","mockImplementation","addProduct","body","toHaveBeenCalled","toHaveReturned","updateProduct","toBeCalled","req","spyOn","deleteProduct","deleteOne","toHaveBeenCalledTimes"],"mappings":"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","sourcesContent":["import productModel from '../../models/productModel.js';\r\nimport { ProductsController } from './productsController.js';\r\nimport { jest, describe, it, expect, beforeEach } from '@jest/globals';\r\nimport { Request } from 'express';\r\n\r\njest.mock('../../models/productModel');\r\n\r\ndescribe('productController', () => {\r\n  beforeEach(() => {\r\n    (productModel.findById as jest.Mock).mockClear();\r\n  });\r\n  describe('getProducts()', () => {\r\n    it('should return empty array', async () => {\r\n      // given\r\n      const productController = new ProductsController();\r\n      (productModel.find as jest.Mock).mockResolvedValue([]);\r\n      // when\r\n      const result = await productController.getProducts();\r\n      // then\r\n      expect(result).toEqual([]);\r\n    });\r\n  });\r\n\r\n  describe('getProduct()', () => {\r\n    it('should return a product from productModel', async () => {\r\n      // given\r\n      const productController = new ProductsController();\r\n      (productModel.findById as jest.Mock).mockResolvedValue([\r\n        {\r\n          title: 'toto'\r\n        }\r\n      ]);\r\n      // when\r\n      const result = await productController.getProduct({\r\n        params: { id: 'gjdkgjdsglksdjg' }\r\n      } as any);\r\n      // then\r\n      expect(result).toEqual([\r\n        {\r\n          title: 'toto'\r\n        }\r\n      ]);\r\n      expect(productModel.findById as jest.Mock).toHaveBeenCalledWith('gjdkgjdsglksdjg');\r\n    });\r\n\r\n    it('should throw product error not found', async () => {\r\n      // given\r\n      const productController = new ProductsController();\r\n      (productModel.findById as jest.Mock).mockResolvedValue(undefined);\r\n      // when\r\n      let actualError: any;\r\n      try {\r\n        await productController.getProduct({\r\n          params: { id: 'gjdkgjdsglksdjg' }\r\n        } as any);\r\n      } catch (error) {\r\n        actualError = error;\r\n      }\r\n      // then\r\n      expect(actualError.message).toEqual('Product Not Found');\r\n      expect(actualError.status).toEqual(404);\r\n      expect(actualError.name).toEqual('NOT_FOUND');\r\n    });\r\n  });\r\n\r\n  describe('addProduct()', () => {\r\n    it('should add a new product in database', async () => {\r\n      // given\r\n      const productController = new ProductsController();\r\n      const save = (jest.fn() as jest.Mock).mockResolvedValue({\r\n        _id: 'id',\r\n        price: 44,\r\n        title: 'product 123'\r\n      });\r\n      (productModel as jest.MockedFunction<any>).mockImplementation(() => {\r\n        return {\r\n          save\r\n        };\r\n      });\r\n      // when\r\n      const result = await productController.addProduct({\r\n        body: {\r\n          price: 44,\r\n          title: 'product 123'\r\n        }\r\n      } as Request<{ price: number, title: string }>);\r\n      // then\r\n      expect(productModel).toHaveBeenCalledWith({\r\n        price: 44,\r\n        title: 'product 123'\r\n      });\r\n      expect(save).toHaveBeenCalled();\r\n      expect(save).toHaveReturned();\r\n      expect(result).toEqual({\r\n        _id: 'id',\r\n        price: 44,\r\n        title: 'product 123'\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('updateProduct()', () => {\r\n    it('should update a product', async () => {\r\n      // given\r\n      const productController = new ProductsController();     \r\n      const save = (jest.fn() as jest.Mock).mockResolvedValue({\r\n        _id: 'some-id',\r\n        title: 'new test updateProduct()',\r\n        price: 47\r\n      });\r\n      (productModel as jest.MockedFunction<any>).mockImplementation(() => {\r\n        return {\r\n          save\r\n        };\r\n      });\r\n      // when\r\n      const result = await productController.updateProduct({\r\n        params: { id: 'some-id' },\r\n        body: { title: 'new test updateProduct()', price: 47 }\r\n      } as Request<{ id: string }, any, { title: string, price: number }>);\r\n      // then\r\n      expect(productModel.findById).toHaveBeenCalledWith('some-id');\r\n      expect(save).toBeCalled();\r\n      expect(save).toHaveReturned();\r\n      expect(result).toEqual({\r\n        _id: 'some-id',\r\n        title: 'new test updateProduct()',\r\n        price: 47\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('deleteProduct()', () => {\r\n    it('should delete a product', async () => {\r\n      // given\r\n      const req = {\r\n        params: { id: 'some_id_123' }\r\n      }\r\n\r\n      const productController = new ProductsController();\r\n      jest.spyOn(productController, 'getProduct').mockResolvedValue({\r\n        _id: 'some_id_123',\r\n        title: 'test deleteProduct()',\r\n        price: 99\r\n      } as any);\r\n\r\n      // when\r\n      const result = await productController.deleteProduct(req as Request<{ id: string }>);\r\n\r\n      // then\r\n      expect(productController.getProduct).toHaveBeenCalledWith(req);\r\n      expect(result).toEqual(undefined);\r\n      expect(productModel.deleteOne).toHaveBeenCalledTimes(1);\r\n      expect(productModel.deleteOne).toHaveBeenCalledWith({\r\n        _id: 'some_id_123'\r\n      });\r\n    });\r\n  });\r\n});\r\n"],"file":"productsController.spec.js"}