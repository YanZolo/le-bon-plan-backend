{"version":3,"sources":["../../../src/controllers/admin/adminController.ts"],"names":["UserModel","ProductModel","UserNotFound","ProductNotFound","bcrypt","AdminController","addUser","body","username","email","password","isAdmin","hashedPassword","hash","newUser","save","getAllUsers","find","getAllProducts","getUser","params","id","user","findById","getProduct","product","updateUser","req","compare","console","log","userUpdated","updateProduct","title","price","updatedProduct","deleteUser","deleteOne","_id","deleteProduct"],"mappings":"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","sourcesContent":["import UserModel from '../../models/userModel.js';\nimport ProductModel from '../../models/productModel.js';\nimport UserNotFound from '../../errors/UserNotFound.js';\nimport ProductNotFound from '../../errors/ProductNotFound.js';\nimport { Request } from 'express';\nimport bcrypt from 'bcrypt';\n\nexport class AdminController {\n  async addUser({\n    body: { username, email, password, isAdmin }\n  }: Request<\n    any,\n    any,\n    { username: string; email: string; password: string; isAdmin: boolean }\n  >) {\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    const newUser = new UserModel({\n      username,\n      email,\n      password: hashedPassword,\n      isAdmin\n    });\n    return newUser.save();\n  }\n\n  async getAllUsers() {\n    return UserModel.find();\n  }\n  async getAllProducts() {\n    return ProductModel.find();\n  }\n\n  async getUser({ params: { id } }: Request<{ id: string }>) {\n    const user = await UserModel.findById(id);\n    if (!user) {\n      throw new UserNotFound();\n    }\n    // req.user = user;  how to pass user in req.user with typescript\n    return user;\n  }\n  async getProduct({ params: { id } }: Request<{ id: string }>) {\n    const product = await ProductModel.findById(id);\n    if (!product) {\n      throw new ProductNotFound();\n    }\n    return product;\n  }\n\n  async updateUser(\n    req: Request<\n      { id: string },\n      any,\n      {\n        username?: string;\n        email?: string;\n        password?: string;\n        isAdmin?: boolean;\n      }\n    >\n  ) {\n    const user = await this.getUser(req);\n    const { username, email, password, isAdmin } = req.body;\n    if (username && username !== user.username) {\n      user.username = username;\n    }\n    if (email && email !== user.email) {\n      user.email = email;\n    }\n    if (password && (await bcrypt.compare(password, user.password)) === false) {\n      const hashedPassword = await bcrypt.hash(password, 10);\n      user.password = hashedPassword;\n      console.log('user.password ===>', user.password);\n    }\n    if (isAdmin && isAdmin !== user.isAdmin) {\n      user.isAdmin = isAdmin;\n    }\n    const userUpdated = new UserModel(user);\n    return await userUpdated.save();\n  }\n  async updateProduct(\n    req: Request<{ id: string }, any, { title: string; price: number }>\n  ) {\n    const product = await this.getProduct(req);\n    const { title, price } = req.body;\n\n    if (title && product.title !== title) {\n      product.title = title;\n    }\n    if (price && product.price !== price) {\n      product.price = price;\n    }\n    const updatedProduct = new ProductModel(product);\n    return await updatedProduct.save();\n  }\n\n  async deleteUser(req: Request<{ id: string }, any, any>) {\n    const user = await this.getUser(req);\n    await UserModel.deleteOne({ _id: user._id });\n  }\n\n  async deleteProduct(req: Request<{ id: string }>) {\n    const product = await this.getProduct(req);\n    await ProductModel.deleteOne({ _id: product._id });\n  }\n}\n"],"file":"adminController.js"}