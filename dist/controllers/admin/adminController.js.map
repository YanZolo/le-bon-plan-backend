{"version":3,"sources":["../../../src/controllers/admin/adminController.ts"],"names":["UserModel","ProductModel","UserNotFound","ProductNotFound","bcrypt","AdminController","addUser","body","username","email","password","hashedPassword","hash","newUser","save","getAllUsers","find","getAllProducts","getUser","params","id","user","findById","getProduct","product","updateUser","req","isAdmin","compare","console","log","userUpdated","updateProduct","title","price","updatedProduct","deleteUser","deleteOne","_id","deleteProduct"],"mappings":"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","sourcesContent":["import UserModel from '../../models/userModel.js';\r\nimport ProductModel from '../../models/productModel.js';\r\nimport UserNotFound from '../../errors/UserNotFound.js';\r\nimport ProductNotFound from '../../errors/ProductNotFound.js';\r\nimport { Request } from 'express';\r\nimport bcrypt from 'bcrypt';\r\n\r\nexport class AdminController {\r\n  async addUser({\r\n    body: { username, email, password }\r\n  }: Request<\r\n    any,\r\n    any,\r\n    { username: string; email: string; password: string; }\r\n  >) {\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    const newUser = new UserModel({\r\n      username,\r\n      email,\r\n      password: hashedPassword,\r\n    });\r\n    return newUser.save();\r\n  }\r\n\r\n  async getAllUsers() {\r\n    return UserModel.find();\r\n  }\r\n  async getAllProducts() {\r\n    return ProductModel.find();\r\n  }\r\n\r\n  async getUser({ params: { id } }: Request<{ id: string }>) {\r\n    const user = await UserModel.findById(id);\r\n    if (!user) {\r\n      throw new UserNotFound();\r\n    }\r\n    // req.user = user;  how to pass user in req.user with typescript\r\n    return user;\r\n  }\r\n  async getProduct({ params: { id } }: Request<{ id: string }>) {\r\n    const product = await ProductModel.findById(id);\r\n    if (!product) {\r\n      throw new ProductNotFound();\r\n    }\r\n    return product;\r\n  }\r\n\r\n  async updateUser(\r\n    req: Request<\r\n      { id: string },\r\n      any,\r\n      { username?: string; email?: string; password?: string; isAdmin?: boolean }\r\n    >\r\n  ) {\r\n    const user = await this.getUser(req);\r\n    const { username, email, password, isAdmin } = req.body;\r\n    if (username && username !== user.username) {\r\n      user.username = username;\r\n    }\r\n    if (email && email !== user.email) {\r\n      user.email = email;\r\n    }\r\n    if (password && await bcrypt.compare(password, user.password) === false) {\r\n         const hashedPassword = await bcrypt.hash(password, 10);\r\n         user.password = hashedPassword  \r\n         console.log('user.password ===>', user.password)    \r\n    }\r\n    if (isAdmin && isAdmin !== user.isAdmin) {\r\n      user.isAdmin = isAdmin;\r\n    }\r\n    const userUpdated = new UserModel(user);\r\n    return await userUpdated.save();\r\n  }\r\n  async updateProduct(\r\n    req: Request<{ id: string }, any, { title: string; price: number }>\r\n  ) {\r\n    const product = await this.getProduct(req);\r\n    const { title, price } = req.body;\r\n\r\n    if (title && product.title !== title) {\r\n      product.title = title;\r\n    }\r\n    if (price && product.price !== price) {\r\n      product.price = price;\r\n    }\r\n    const updatedProduct = new ProductModel(product);\r\n    return await updatedProduct.save();\r\n  }\r\n\r\n  async deleteUser(req: Request<{ id: string }, any, any>) {\r\n    const user = await this.getUser(req);\r\n    await UserModel.deleteOne({ _id: user._id });\r\n  }\r\n\r\n  async deleteProduct(req: Request<{ id: string }>) {\r\n    const product = await this.getProduct(req);\r\n    await ProductModel.deleteOne({ _id: product._id });\r\n  }\r\n}\r\n"],"file":"adminController.js"}