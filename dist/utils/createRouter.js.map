{"version":3,"sources":["../../src/utils/createRouter.ts"],"names":["express","createRouter","routes","router","Router","forEach","route","method","toLowerCase","path","pre","createHandler","handler","responseStatus","req","res","result","status","json","e","name","message","stack","process","env","NODE_ENV"],"mappings":"AAAA,OAAOA,OAAP,MAA2C,SAA3C;AASA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA+C;AACpD,QAAMC,MAAM,GAAGH,OAAO,CAACI,MAAR,EAAf;AACAF,EAAAA,MAAM,CAACG,OAAP,CAAgBC,KAAD,IAAW;AACxB,UAAMC,MAAM,GAAGD,KAAK,CAACC,MAAN,CAAaC,WAAb,EAAf;AACAL,IAAAA,MAAM,CAACI,MAAD,CAAN,CAAeD,KAAK,CAACG,IAArB,EAA2B,GAAG,CAAC,IAAGH,KAAK,CAACI,GAAN,IAAa,EAAhB,CAAD,EAAqBC,aAAa,CAACL,KAAD,CAAlC,CAA9B;AACD,GAHD;AAIA,SAAOH,MAAP;AACD;AAED,OAAO,SAASQ,aAAT,CAAuB;AAC5BC,EAAAA,OAD4B;AAE5BC,EAAAA,cAAc,GAAG;AAFW,CAAvB,EAGgB;AACrB,SAAO,OAAOC,GAAP,EAAqBC,GAArB,KAAuC;AAC5C,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMJ,OAAO,CAACE,GAAD,CAA5B;AACAC,MAAAA,GAAG,CAACE,MAAJ,CAAWJ,cAAX,EAA2BK,IAA3B,CAAgCF,MAAhC;AACD,KAHD,CAGE,OAAOG,CAAP,EAAe;AACfJ,MAAAA,GAAG,CAACE,MAAJ,CAAWE,CAAC,CAACF,MAAF,IAAY,GAAvB,EAA4BC,IAA5B,CAAiC;AAC/BE,QAAAA,IAAI,EAAED,CAAC,CAACC,IAAF,IAAU,gBADe;AAE/BC,QAAAA,OAAO,EAAEF,CAAC,CAACE,OAFoB;AAG/BJ,QAAAA,MAAM,EAAEE,CAAC,CAACF,MAAF,IAAY,GAHW;AAI/BK,QAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCN,CAAC,CAACG,KAA1C,GAAkD;AAJ1B,OAAjC;AAMD;AACF,GAZD;AAaD","sourcesContent":["import express, { Request, Response } from 'express';\nexport interface RoutesOptions {\n  path: string;\n  method: string;\n  pre?: Function[];\n  handler: Function; // temporary fixed with rule \"@typescript-eslint/ban-types\":\"off\" in eslintrc.json :/\n  responseStatus?: number;\n}\n\nexport function createRouter(routes: RoutesOptions[]) {\n  const router = express.Router();\n  routes.forEach((route) => {\n    const method = route.method.toLowerCase();\n    router[method](route.path, ...[...route.pre || [], createHandler(route)]);\n  });\n  return router;\n}\n\nexport function createHandler({\n  handler,\n  responseStatus = 200\n}: RoutesOptions): any {\n  return async (req: Request, res: Response) => {\n    try {\n      const result = await handler(req);\n      res.status(responseStatus).json(result);\n    } catch (e: any) {\n      res.status(e.status || 500).json({\n        name: e.name || 'INTERNAL_ERROR',\n        message: e.message,\n        status: e.status || 500,\n        stack: process.env.NODE_ENV !== 'production' ? e.stack : null\n      });\n    }\n  };\n}\n"],"file":"createRouter.js"}