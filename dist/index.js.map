{"version":3,"sources":["../src/index.ts"],"names":["dotenv","express","productRoutes","userRoutes","versionRoutes","startDB","path","fileURLToPath","config","app","url","process","env","DB_URL","__filename","import","meta","__dirname","dirname","PORT","disable","set","join","use","json","urlencoded","extended","get","req","res","render","send","connect","then","listen","console","log","catch","err","error"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,OAAP,MAAwD,SAAxD;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,aAAT,QAA8B,KAA9B;AACAP,MAAM,CAACQ,MAAP;AACA,MAAMC,GAAgB,GAAGR,OAAO,EAAhC;AACA,MAAMS,GAAuB,GAAGC,OAAO,CAACC,GAAR,CAAYC,MAA5C;;AACA,MAAMC,UAAkB,GAAGP,aAAa,CAACQ,MAAM,CAACC,IAAP,CAAYN,GAAb,CAAxC;;AACA,MAAMO,SAAiB,GAAGX,IAAI,CAACY,OAAL,CAAaJ,UAAb,CAA1B;;AACA,MAAMK,IAAiC,GAAGR,OAAO,CAACC,GAAR,CAAYO,IAAZ,IAAoB,IAA9D;AAEAV,GAAG,CAACW,OAAJ,CAAY,cAAZ;AACAX,GAAG,CAACY,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;AACAZ,GAAG,CAACY,GAAJ,CAAQ,OAAR,EAAiBf,IAAI,CAACgB,IAAL,CAAUL,SAAV,EAAqB,IAArB,EAA2B,OAA3B,CAAjB;AAEAR,GAAG,CAACc,GAAJ,CAAQtB,OAAO,CAACuB,IAAR,EAAR;AACAf,GAAG,CAACc,GAAJ,CAAQtB,OAAO,CAACwB,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR;AACAjB,GAAG,CAACc,GAAJ,CAAQ,UAAR,EAAoBnB,aAApB;AACAK,GAAG,CAACc,GAAJ,CAAQ,UAAR,EAAoBrB,aAApB;AACAO,GAAG,CAACc,GAAJ,CAAQ,OAAR,EAAiBpB,UAAjB;AAEAM,GAAG,CAACkB,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAeC,GAAf,KAAiC;AAC5CA,EAAAA,GAAG,CAACC,MAAJ,CAAW,OAAX;AACD,CAFD;AAGArB,GAAG,CAACkB,GAAJ,CAAQ,SAAR,EAAmB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/BA,EAAAA,GAAG,CAACE,IAAJ,CAAS,IAAT;AACD,CAFD;;AAIA,CAAC,SAASC,OAAT,GAAmB;AAClB3B,EAAAA,OAAO,CAACK,GAAD,CAAP,CACGuB,IADH,CACQ,MAAM;AACVxB,IAAAA,GAAG,CAACyB,MAAJ,CAAWf,IAAX,EAAiB,MAAM;AACrBgB,MAAAA,OAAO,CAACC,GAAR,CAAa,0BAAyBjB,IAAK,EAA3C;AACD,KAFD;AAGD,GALH,EAMGkB,KANH,CAMUC,GAAD,IAAS;AACdH,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACD,GARH;AASD,CAVD","sourcesContent":["import dotenv from 'dotenv';\nimport express, { Application, Request, Response } from 'express';\nimport productRoutes from './controllers/products/routes.js';\nimport userRoutes from './controllers/users/routes.js';\nimport versionRoutes from './controllers/version/routes.js';\nimport startDB from './db/connect.js';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\ndotenv.config();\nconst app: Application = express();\nconst url: string | undefined = process.env.DB_URL;\nconst __filename: string = fileURLToPath(import.meta.url);\nconst __dirname: string = path.dirname(__filename);\nconst PORT: string | number | undefined = process.env.PORT || 8888;\n\napp.disable('x-powered-by');\napp.set('view engine', 'ejs');\napp.set('views', path.join(__dirname, '..', 'views'));\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use('/version', versionRoutes);\napp.use('/product', productRoutes);\napp.use('/user', userRoutes);\n\napp.get('/', (req: Request, res: Response) => {\n  res.render('login');\n});\napp.get('/health', (req, res) => {\n  res.send('ok');\n});\n\n(function connect() {\n  startDB(url)\n    .then(() => {\n      app.listen(PORT, () => {\n        console.log(`server started at port ${PORT}`);\n      });\n    })\n    .catch((err) => {\n      console.error(err);\n    });\n})();\n"],"file":"index.js"}